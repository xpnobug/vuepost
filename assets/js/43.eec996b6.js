(window.webpackJsonp=window.webpackJsonp||[]).push([[43],{378:function(t,a,s){"use strict";s.r(a);var n=s(45),e=Object(n.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"spring-常见面试题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#spring-常见面试题"}},[t._v("#")]),t._v(" Spring 常见面试题")]),t._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"#1-%E4%B8%80%E8%88%AC%E9%97%AE%E9%A2%98"}},[t._v("1. 一般问题")]),t._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"#11-%E4%B8%8D%E5%90%8C%E7%89%88%E6%9C%AC%E7%9A%84-spring-framework-%E6%9C%89%E5%93%AA%E4%BA%9B%E4%B8%BB%E8%A6%81%E5%8A%9F%E8%83%BD"}},[t._v("1.1. 不同版本的 Spring Framework 有哪些主要功能？")])]),t._v(" "),s("li",[s("a",{attrs:{href:"#12-%E4%BB%80%E4%B9%88%E6%98%AF-spring-framework"}},[t._v("1.2. 什么是 Spring Framework？")])]),t._v(" "),s("li",[s("a",{attrs:{href:"#13-%E5%88%97%E4%B8%BE-spring-framework-%E7%9A%84%E4%BC%98%E7%82%B9"}},[t._v("1.3. 列举 Spring Framework 的优点。")])]),t._v(" "),s("li",[s("a",{attrs:{href:"#14-spring-framework-%E6%9C%89%E5%93%AA%E4%BA%9B%E4%B8%8D%E5%90%8C%E7%9A%84%E5%8A%9F%E8%83%BD"}},[t._v("1.4. Spring Framework 有哪些不同的功能？")])]),t._v(" "),s("li",[s("a",{attrs:{href:"#15-spring-framework-%E4%B8%AD%E6%9C%89%E5%A4%9A%E5%B0%91%E4%B8%AA%E6%A8%A1%E5%9D%97%E5%AE%83%E4%BB%AC%E5%88%86%E5%88%AB%E6%98%AF%E4%BB%80%E4%B9%88"}},[t._v("1.5. Spring Framework 中有多少个模块，它们分别是什么？")])]),t._v(" "),s("li",[s("a",{attrs:{href:"#16-%E4%BB%80%E4%B9%88%E6%98%AF-spring-%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6"}},[t._v("1.6. 什么是 Spring 配置文件？")])]),t._v(" "),s("li",[s("a",{attrs:{href:"#17-spring-%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E6%9C%89%E5%93%AA%E4%BA%9B%E4%B8%8D%E5%90%8C%E7%BB%84%E4%BB%B6"}},[t._v("1.7. Spring 应用程序有哪些不同组件？")])]),t._v(" "),s("li",[s("a",{attrs:{href:"#18-%E4%BD%BF%E7%94%A8-spring-%E6%9C%89%E5%93%AA%E4%BA%9B%E6%96%B9%E5%BC%8F"}},[t._v("1.8. 使用 Spring 有哪些方式？")])])])]),t._v(" "),s("li",[s("a",{attrs:{href:"#2-%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5ioc"}},[t._v("2. 依赖注入（Ioc）")]),t._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"#21-%E4%BB%80%E4%B9%88%E6%98%AF-spring-ioc-%E5%AE%B9%E5%99%A8"}},[t._v("2.1. 什么是 Spring IOC 容器？")])]),t._v(" "),s("li",[s("a",{attrs:{href:"#22-%E4%BB%80%E4%B9%88%E6%98%AF%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5"}},[t._v("2.2. 什么是依赖注入？")])]),t._v(" "),s("li",[s("a",{attrs:{href:"#23-%E5%8F%AF%E4%BB%A5%E9%80%9A%E8%BF%87%E5%A4%9A%E5%B0%91%E7%A7%8D%E6%96%B9%E5%BC%8F%E5%AE%8C%E6%88%90%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5"}},[t._v("2.3. 可以通过多少种方式完成依赖注入？")])]),t._v(" "),s("li",[s("a",{attrs:{href:"#24-%E5%8C%BA%E5%88%86%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E6%B3%A8%E5%85%A5%E5%92%8C-setter-%E6%B3%A8%E5%85%A5"}},[t._v("2.4. 区分构造函数注入和 setter 注入。")])]),t._v(" "),s("li",[s("a",{attrs:{href:"#25-spring-%E4%B8%AD%E6%9C%89%E5%A4%9A%E5%B0%91%E7%A7%8D-ioc-%E5%AE%B9%E5%99%A8"}},[t._v("2.5. spring 中有多少种 IOC 容器？")])]),t._v(" "),s("li",[s("a",{attrs:{href:"#26-%E5%8C%BA%E5%88%86-beanfactory-%E5%92%8C-applicationcontext"}},[t._v("2.6. 区分 BeanFactory 和 ApplicationContext。")])]),t._v(" "),s("li",[s("a",{attrs:{href:"#27-%E5%88%97%E4%B8%BE-ioc-%E7%9A%84%E4%B8%80%E4%BA%9B%E5%A5%BD%E5%A4%84"}},[t._v("2.7. 列举 IoC 的一些好处。")])]),t._v(" "),s("li",[s("a",{attrs:{href:"#28-spring-ioc-%E7%9A%84%E5%AE%9E%E7%8E%B0%E6%9C%BA%E5%88%B6"}},[t._v("2.8. Spring IoC 的实现机制。")])])])]),t._v(" "),s("li",[s("a",{attrs:{href:"#3-beans"}},[t._v("3. Beans")]),t._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"#31-%E4%BB%80%E4%B9%88%E6%98%AF-spring-bean"}},[t._v("3.1. 什么是 spring bean？")])]),t._v(" "),s("li",[s("a",{attrs:{href:"#32-spring-%E6%8F%90%E4%BE%9B%E4%BA%86%E5%93%AA%E4%BA%9B%E9%85%8D%E7%BD%AE%E6%96%B9%E5%BC%8F"}},[t._v("3.2. spring 提供了哪些配置方式？")])]),t._v(" "),s("li",[s("a",{attrs:{href:"#33-spring-%E6%94%AF%E6%8C%81%E9%9B%86%E4%B8%AD-bean-scope"}},[t._v("3.3. spring 支持集中 bean scope？")])]),t._v(" "),s("li",[s("a",{attrs:{href:"#34-spring-bean-%E5%AE%B9%E5%99%A8%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E6%98%AF%E4%BB%80%E4%B9%88%E6%A0%B7%E7%9A%84"}},[t._v("3.4. spring bean 容器的生命周期是什么样的？")])]),t._v(" "),s("li",[s("a",{attrs:{href:"#35-%E4%BB%80%E4%B9%88%E6%98%AF-spring-%E7%9A%84%E5%86%85%E9%83%A8-bean"}},[t._v("3.5. 什么是 spring 的内部 bean？")])]),t._v(" "),s("li",[s("a",{attrs:{href:"#36-%E4%BB%80%E4%B9%88%E6%98%AF-spring-%E8%A3%85%E9%85%8D"}},[t._v("3.6. 什么是 spring 装配")])]),t._v(" "),s("li",[s("a",{attrs:{href:"#37-%E8%87%AA%E5%8A%A8%E8%A3%85%E9%85%8D%E6%9C%89%E5%93%AA%E4%BA%9B%E6%96%B9%E5%BC%8F"}},[t._v("3.7. 自动装配有哪些方式？")])]),t._v(" "),s("li",[s("a",{attrs:{href:"#38-%E8%87%AA%E5%8A%A8%E8%A3%85%E9%85%8D%E6%9C%89%E4%BB%80%E4%B9%88%E5%B1%80%E9%99%90"}},[t._v("3.8. 自动装配有什么局限？")])])])]),t._v(" "),s("li",[s("a",{attrs:{href:"#4-%E6%B3%A8%E8%A7%A3"}},[t._v("4. 注解")]),t._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"#41-%E4%BD%A0%E7%94%A8%E8%BF%87%E5%93%AA%E4%BA%9B%E9%87%8D%E8%A6%81%E7%9A%84-spring-%E6%B3%A8%E8%A7%A3"}},[t._v("4.1. 你用过哪些重要的 Spring 注解？")])]),t._v(" "),s("li",[s("a",{attrs:{href:"#42-%E5%A6%82%E4%BD%95%E5%9C%A8-spring-%E4%B8%AD%E5%90%AF%E5%8A%A8%E6%B3%A8%E8%A7%A3%E8%A3%85%E9%85%8D"}},[t._v("4.2. 如何在 spring 中启动注解装配？")])]),t._v(" "),s("li",[s("a",{attrs:{href:"#43-component-controller-repository-service-%E6%9C%89%E4%BD%95%E5%8C%BA%E5%88%AB"}},[t._v("4.3. @Component, @Controller, @Repository, @Service 有何区别？")])]),t._v(" "),s("li",[s("a",{attrs:{href:"#44-required-%E6%B3%A8%E8%A7%A3%E6%9C%89%E4%BB%80%E4%B9%88%E7%94%A8"}},[t._v("4.4. @Required 注解有什么用？")])]),t._v(" "),s("li",[s("a",{attrs:{href:"#45-autowired-%E6%B3%A8%E8%A7%A3%E6%9C%89%E4%BB%80%E4%B9%88%E7%94%A8"}},[t._v("4.5. @Autowired 注解有什么用？")])]),t._v(" "),s("li",[s("a",{attrs:{href:"#46-qualifier-%E6%B3%A8%E8%A7%A3%E6%9C%89%E4%BB%80%E4%B9%88%E7%94%A8"}},[t._v("4.6. @Qualifier 注解有什么用？")])]),t._v(" "),s("li",[s("a",{attrs:{href:"#47-requestmapping-%E6%B3%A8%E8%A7%A3%E6%9C%89%E4%BB%80%E4%B9%88%E7%94%A8"}},[t._v("4.7. @RequestMapping 注解有什么用？")])])])]),t._v(" "),s("li",[s("a",{attrs:{href:"#5-%E6%95%B0%E6%8D%AE%E8%AE%BF%E9%97%AE"}},[t._v("5. 数据访问")]),t._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"#51-spring-dao-%E6%9C%89%E4%BB%80%E4%B9%88%E7%94%A8"}},[t._v("5.1. spring DAO 有什么用？")])]),t._v(" "),s("li",[s("a",{attrs:{href:"#52-%E5%88%97%E4%B8%BE-spring-dao-%E6%8A%9B%E5%87%BA%E7%9A%84%E5%BC%82%E5%B8%B8"}},[t._v("5.2. 列举 Spring DAO 抛出的异常。")])]),t._v(" "),s("li",[s("a",{attrs:{href:"#53-spring-jdbc-api-%E4%B8%AD%E5%AD%98%E5%9C%A8%E5%93%AA%E4%BA%9B%E7%B1%BB"}},[t._v("5.3. spring JDBC API 中存在哪些类？")])]),t._v(" "),s("li",[s("a",{attrs:{href:"#54-%E4%BD%BF%E7%94%A8-spring-%E8%AE%BF%E9%97%AE-hibernate-%E7%9A%84%E6%96%B9%E6%B3%95%E6%9C%89%E5%93%AA%E4%BA%9B"}},[t._v("5.4. 使用 Spring 访问 Hibernate 的方法有哪些？")])]),t._v(" "),s("li",[s("a",{attrs:{href:"#55-%E5%88%97%E4%B8%BE-spring-%E6%94%AF%E6%8C%81%E7%9A%84%E4%BA%8B%E5%8A%A1%E7%AE%A1%E7%90%86%E7%B1%BB%E5%9E%8B"}},[t._v("5.5. 列举 spring 支持的事务管理类型")])]),t._v(" "),s("li",[s("a",{attrs:{href:"#56-spring-%E6%94%AF%E6%8C%81%E5%93%AA%E4%BA%9B-orm-%E6%A1%86%E6%9E%B6"}},[t._v("5.6. spring 支持哪些 ORM 框架")])])])]),t._v(" "),s("li",[s("a",{attrs:{href:"#6-aop"}},[t._v("6. AOP")]),t._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"#61-%E4%BB%80%E4%B9%88%E6%98%AF-aop"}},[t._v("6.1. 什么是 AOP？")])]),t._v(" "),s("li",[s("a",{attrs:{href:"#62-aop-%E4%B8%AD%E7%9A%84-aspectadvicepointcutjointpoint-%E5%92%8C-advice-%E5%8F%82%E6%95%B0%E5%88%86%E5%88%AB%E6%98%AF%E4%BB%80%E4%B9%88"}},[t._v("6.2. AOP 中的 Aspect、Advice、Pointcut、JointPoint 和 Advice 参数分别是什么？")])]),t._v(" "),s("li",[s("a",{attrs:{href:"#63-%E4%BB%80%E4%B9%88%E6%98%AF%E9%80%9A%E7%9F%A5advice"}},[t._v("6.3. 什么是通知（Advice）？")])]),t._v(" "),s("li",[s("a",{attrs:{href:"#64-%E6%9C%89%E5%93%AA%E4%BA%9B%E7%B1%BB%E5%9E%8B%E7%9A%84%E9%80%9A%E7%9F%A5advice"}},[t._v("6.4. 有哪些类型的通知（Advice）？")])]),t._v(" "),s("li",[s("a",{attrs:{href:"#65-%E6%8C%87%E5%87%BA%E5%9C%A8-spring-aop-%E4%B8%AD-concern-%E5%92%8C-cross-cutting-concern-%E7%9A%84%E4%B8%8D%E5%90%8C%E4%B9%8B%E5%A4%84"}},[t._v("6.5. 指出在 spring aop 中 concern 和 cross-cutting concern 的不同之处。")])]),t._v(" "),s("li",[s("a",{attrs:{href:"#66-aop-%E6%9C%89%E5%93%AA%E4%BA%9B%E5%AE%9E%E7%8E%B0%E6%96%B9%E5%BC%8F"}},[t._v("6.6. AOP 有哪些实现方式？")])]),t._v(" "),s("li",[s("a",{attrs:{href:"#67-spring-aop-and-aspectj-aop-%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB"}},[t._v("6.7. Spring AOP and AspectJ AOP 有什么区别？")])]),t._v(" "),s("li",[s("a",{attrs:{href:"#68-%E5%A6%82%E4%BD%95%E7%90%86%E8%A7%A3-spring-%E4%B8%AD%E7%9A%84%E4%BB%A3%E7%90%86"}},[t._v("6.8. 如何理解 Spring 中的代理？")])]),t._v(" "),s("li",[s("a",{attrs:{href:"#69-%E4%BB%80%E4%B9%88%E6%98%AF%E7%BC%96%E7%BB%87weaving"}},[t._v("6.9. 什么是编织（Weaving）？")])])])]),t._v(" "),s("li",[s("a",{attrs:{href:"#7-mvc"}},[t._v("7. MVC")]),t._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"#71-spring-mvc-%E6%A1%86%E6%9E%B6%E6%9C%89%E4%BB%80%E4%B9%88%E7%94%A8"}},[t._v("7.1. Spring MVC 框架有什么用？")])]),t._v(" "),s("li",[s("a",{attrs:{href:"#72-%E6%8F%8F%E8%BF%B0%E4%B8%80%E4%B8%8B-dispatcherservlet-%E7%9A%84%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B"}},[t._v("7.2. 描述一下 DispatcherServlet 的工作流程")])]),t._v(" "),s("li",[s("a",{attrs:{href:"#73-%E4%BB%8B%E7%BB%8D%E4%B8%80%E4%B8%8B-webapplicationcontext"}},[t._v("7.3. 介绍一下 WebApplicationContext")])])])]),t._v(" "),s("li",[s("a",{attrs:{href:"#8-%E8%B5%84%E6%96%99"}},[t._v("8. 资料")])])]),t._v(" "),s("h2",{attrs:{id:"_1-一般问题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-一般问题"}},[t._v("#")]),t._v(" 1. 一般问题")]),t._v(" "),s("h3",{attrs:{id:"_1-1-不同版本的-spring-framework-有哪些主要功能"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-不同版本的-spring-framework-有哪些主要功能"}},[t._v("#")]),t._v(" 1.1. 不同版本的 Spring Framework 有哪些主要功能？")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("Version")]),t._v(" "),s("th",[t._v("Feature")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("Spring 2.5")]),t._v(" "),s("td",[t._v("发布于 2007 年。这是第一个支持注解的版本。")])]),t._v(" "),s("tr",[s("td",[t._v("Spring 3.0")]),t._v(" "),s("td",[t._v("发布于 2009 年。它完全利用了 Java5 中的改进，并为 JEE6 提供了支持。")])]),t._v(" "),s("tr",[s("td",[t._v("Spring 4.0")]),t._v(" "),s("td",[t._v("发布于 2013 年。这是第一个完全支持 JAVA8 的版本。")])])])]),t._v(" "),s("h3",{attrs:{id:"_1-2-什么是-spring-framework"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-什么是-spring-framework"}},[t._v("#")]),t._v(" 1.2. 什么是 Spring Framework？")]),t._v(" "),s("ul",[s("li",[t._v("Spring 是一个开源应用框架，旨在降低应用程序开发的复杂度。")]),t._v(" "),s("li",[t._v("它是轻量级、松散耦合的。")]),t._v(" "),s("li",[t._v("它具有分层体系结构，允许用户选择组件，同时还为 J2EE 应用程序开发提供了一个有凝聚力的框架。")]),t._v(" "),s("li",[t._v("它可以集成其他框架，如 Structs、Hibernate、EJB 等，所以又称为框架的框架。")])]),t._v(" "),s("h3",{attrs:{id:"_1-3-列举-spring-framework-的优点。"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-列举-spring-framework-的优点。"}},[t._v("#")]),t._v(" 1.3. 列举 Spring Framework 的优点。")]),t._v(" "),s("ul",[s("li",[t._v("由于 Spring Frameworks 的分层架构，用户可以自由选择自己需要的组件。")]),t._v(" "),s("li",[t._v("Spring Framework 支持 POJO(Plain Old Java Object) 编程，从而具备持续集成和可测试性。")]),t._v(" "),s("li",[t._v("由于依赖注入和控制反转，JDBC 得以简化。")]),t._v(" "),s("li",[t._v("它是开源免费的。")])]),t._v(" "),s("h3",{attrs:{id:"_1-4-spring-framework-有哪些不同的功能"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-4-spring-framework-有哪些不同的功能"}},[t._v("#")]),t._v(" 1.4. Spring Framework 有哪些不同的功能？")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("轻量级")]),t._v(" - Spring 在代码量和透明度方面都很轻便。")]),t._v(" "),s("li",[s("strong",[t._v("IOC")]),t._v(" - 控制反转")]),t._v(" "),s("li",[s("strong",[t._v("AOP")]),t._v(" - 面向切面编程可以将应用业务逻辑和系统服务分离，以实现高内聚。")]),t._v(" "),s("li",[s("strong",[t._v("容器")]),t._v(" - Spring 负责创建和管理对象（Bean）的生命周期和配置。")]),t._v(" "),s("li",[s("strong",[t._v("MVC")]),t._v(" - 对 web 应用提供了高度可配置性，其他框架的集成也十分方便。")]),t._v(" "),s("li",[s("strong",[t._v("事务管理")]),t._v(" - 提供了用于事务管理的通用抽象层。Spring 的事务支持也可用于容器较少的环境。")]),t._v(" "),s("li",[s("strong",[t._v("JDBC 异常")]),t._v(" - Spring 的 JDBC 抽象层提供了一个异常层次结构，简化了错误处理策略。")])]),t._v(" "),s("h3",{attrs:{id:"_1-5-spring-framework-中有多少个模块-它们分别是什么"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-5-spring-framework-中有多少个模块-它们分别是什么"}},[t._v("#")]),t._v(" 1.5. Spring Framework 中有多少个模块，它们分别是什么？")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://raw.githubusercontent.com/dunwu/images/dev/cs/java/spring/spring-framework.png",alt:"img"}})]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("Spring 核心容器")]),t._v(" – 该层基本上是 Spring Framework 的核心。它包含以下模块：\n"),s("ul",[s("li",[t._v("Spring Core")]),t._v(" "),s("li",[t._v("Spring Bean")]),t._v(" "),s("li",[t._v("SpEL (Spring Expression Language)")]),t._v(" "),s("li",[t._v("Spring Context")])])]),t._v(" "),s("li",[s("strong",[t._v("数据访问/集成")]),t._v(" – 该层提供与数据库交互的支持。它包含以下模块：\n"),s("ul",[s("li",[t._v("JDBC (Java DataBase Connectivity)")]),t._v(" "),s("li",[t._v("ORM (Object Relational Mapping)")]),t._v(" "),s("li",[t._v("OXM (Object XML Mappers)")]),t._v(" "),s("li",[t._v("JMS (Java Messaging Service)")]),t._v(" "),s("li",[t._v("Transaction")])])]),t._v(" "),s("li",[s("strong",[t._v("Web")]),t._v(" – 该层提供了创建 Web 应用程序的支持。它包含以下模块：\n"),s("ul",[s("li",[t._v("Web")]),t._v(" "),s("li",[t._v("Web – Servlet")]),t._v(" "),s("li",[t._v("Web – Socket")]),t._v(" "),s("li",[t._v("Web – Portlet")])])]),t._v(" "),s("li",[s("strong",[t._v("AOP")]),t._v(" – 该层支持面向切面编程")]),t._v(" "),s("li",[s("strong",[t._v("Instrumentation")]),t._v(" – 该层为类检测和类加载器实现提供支持。")]),t._v(" "),s("li",[s("strong",[t._v("Test")]),t._v(" – 该层为使用 JUnit 和 TestNG 进行测试提供支持。")]),t._v(" "),s("li",[s("strong",[t._v("几个杂项模块:")]),t._v(" "),s("ul",[s("li",[t._v("Messaging – 该模块为 STOMP 提供支持。它还支持注解编程模型，该模型用于从 WebSocket 客户端路由和处理 STOMP 消息。")]),t._v(" "),s("li",[t._v("Aspects – 该模块为与 AspectJ 的集成提供支持。")])])])]),t._v(" "),s("h3",{attrs:{id:"_1-6-什么是-spring-配置文件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-6-什么是-spring-配置文件"}},[t._v("#")]),t._v(" 1.6. 什么是 Spring 配置文件？")]),t._v(" "),s("p",[t._v("Spring 配置文件是 XML 文件。该文件主要包含类信息。它描述了这些类是如何配置以及相互引入的。但是，XML 配置文件冗长且更加干净。如果没有正确规划和编写，那么在大项目中管理变得非常困难。")]),t._v(" "),s("h3",{attrs:{id:"_1-7-spring-应用程序有哪些不同组件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-7-spring-应用程序有哪些不同组件"}},[t._v("#")]),t._v(" 1.7. Spring 应用程序有哪些不同组件？")]),t._v(" "),s("p",[t._v("Spring 应用一般有以下组件：")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("接口")]),t._v(" - 定义功能。")]),t._v(" "),s("li",[s("strong",[t._v("Bean 类")]),t._v(" - 它包含属性，setter 和 getter 方法，函数等。")]),t._v(" "),s("li",[s("strong",[t._v("Spring 面向切面编程（AOP）")]),t._v(" - 提供面向切面编程的功能。")]),t._v(" "),s("li",[s("strong",[t._v("Bean 配置文件")]),t._v(" - 包含类的信息以及如何配置它们。")]),t._v(" "),s("li",[s("strong",[t._v("用户程序")]),t._v(" - 它使用接口。")])]),t._v(" "),s("h3",{attrs:{id:"_1-8-使用-spring-有哪些方式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-8-使用-spring-有哪些方式"}},[t._v("#")]),t._v(" 1.8. 使用 Spring 有哪些方式？")]),t._v(" "),s("p",[t._v("使用 Spring 有以下方式：")]),t._v(" "),s("ul",[s("li",[t._v("作为一个成熟的 Spring Web 应用程序。")]),t._v(" "),s("li",[t._v("作为第三方 Web 框架，使用 Spring Frameworks 中间层。")]),t._v(" "),s("li",[t._v("用于远程使用。")]),t._v(" "),s("li",[t._v("作为企业级 Java Bean，它可以包装现有的 POJO（Plain Old Java Objects）。")])]),t._v(" "),s("h2",{attrs:{id:"_2-依赖注入-ioc"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-依赖注入-ioc"}},[t._v("#")]),t._v(" 2. 依赖注入（Ioc）")]),t._v(" "),s("h3",{attrs:{id:"_2-1-什么是-spring-ioc-容器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-什么是-spring-ioc-容器"}},[t._v("#")]),t._v(" 2.1. 什么是 Spring IOC 容器？")]),t._v(" "),s("p",[t._v("Spring 框架的核心是 Spring 容器。容器创建对象，将它们装配在一起，配置它们并管理它们的完整生命周期。Spring 容器使用依赖注入来管理组成应用程序的组件。容器通过读取提供的配置元数据来接收对象进行实例化，配置和组装的指令。该元数据可以通过 XML，Java 注解或 Java 代码提供。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://upload-images.jianshu.io/upload_images/3101171-33099411d16ca051.png",alt:"img"}})]),t._v(" "),s("h3",{attrs:{id:"_2-2-什么是依赖注入"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-什么是依赖注入"}},[t._v("#")]),t._v(" 2.2. 什么是依赖注入？")]),t._v(" "),s("p",[t._v("在依赖注入中，您不必创建对象，但必须描述如何创建它们。您不是直接在代码中将组件和服务连接在一起，而是描述配置文件中哪些组件需要哪些服务。由 IoC 容器将它们装配在一起。")]),t._v(" "),s("h3",{attrs:{id:"_2-3-可以通过多少种方式完成依赖注入"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-可以通过多少种方式完成依赖注入"}},[t._v("#")]),t._v(" 2.3. 可以通过多少种方式完成依赖注入？")]),t._v(" "),s("p",[t._v("通常，依赖注入可以通过三种方式完成，即：")]),t._v(" "),s("ul",[s("li",[t._v("构造函数注入")]),t._v(" "),s("li",[t._v("setter 注入")]),t._v(" "),s("li",[t._v("接口注入")])]),t._v(" "),s("p",[t._v("在 Spring Framework 中，仅使用构造函数和 setter 注入。")]),t._v(" "),s("h3",{attrs:{id:"_2-4-区分构造函数注入和-setter-注入。"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-4-区分构造函数注入和-setter-注入。"}},[t._v("#")]),t._v(" 2.4. 区分构造函数注入和 setter 注入。")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("构造函数注入")]),t._v(" "),s("th",[t._v("setter 注入")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("没有部分注入")]),t._v(" "),s("td",[t._v("有部分注入")])]),t._v(" "),s("tr",[s("td",[t._v("不会覆盖 setter 属性")]),t._v(" "),s("td",[t._v("会覆盖 setter 属性")])]),t._v(" "),s("tr",[s("td",[t._v("任意修改都会创建一个新实例")]),t._v(" "),s("td",[t._v("任意修改不会创建一个新实例")])]),t._v(" "),s("tr",[s("td",[t._v("适用于设置很多属性")]),t._v(" "),s("td",[t._v("适用于设置少量属性")])])])]),t._v(" "),s("h3",{attrs:{id:"_2-5-spring-中有多少种-ioc-容器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-5-spring-中有多少种-ioc-容器"}},[t._v("#")]),t._v(" 2.5. spring 中有多少种 IOC 容器？")]),t._v(" "),s("ul",[s("li",[t._v("BeanFactory - BeanFactory 就像一个包含 bean 集合的工厂类。它会在客户端要求时实例化 bean。")]),t._v(" "),s("li",[t._v("ApplicationContext - ApplicationContext 接口扩展了 BeanFactory 接口。它在 BeanFactory 基础上提供了一些额外的功能。")])]),t._v(" "),s("h3",{attrs:{id:"_2-6-区分-beanfactory-和-applicationcontext。"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-6-区分-beanfactory-和-applicationcontext。"}},[t._v("#")]),t._v(" 2.6. 区分 BeanFactory 和 ApplicationContext。")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("BeanFactory")]),t._v(" "),s("th",[t._v("ApplicationContext")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("它使用懒加载")]),t._v(" "),s("td",[t._v("它使用即时加载")])]),t._v(" "),s("tr",[s("td",[t._v("它使用语法显式提供资源对象")]),t._v(" "),s("td",[t._v("它自己创建和管理资源对象")])]),t._v(" "),s("tr",[s("td",[t._v("不支持国际化")]),t._v(" "),s("td",[t._v("支持国际化")])]),t._v(" "),s("tr",[s("td",[t._v("不支持基于依赖的注解")]),t._v(" "),s("td",[t._v("支持基于依赖的注解")])])])]),t._v(" "),s("h3",{attrs:{id:"_2-7-列举-ioc-的一些好处。"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-7-列举-ioc-的一些好处。"}},[t._v("#")]),t._v(" 2.7. 列举 IoC 的一些好处。")]),t._v(" "),s("p",[t._v("IoC 的一些好处是：")]),t._v(" "),s("ul",[s("li",[t._v("它将最小化应用程序中的代码量。")]),t._v(" "),s("li",[t._v("它将使您的应用程序易于测试，因为它不需要单元测试用例中的任何单例或 JNDI 查找机制。")]),t._v(" "),s("li",[t._v("它以最小的影响和最少的侵入机制促进松耦合。")]),t._v(" "),s("li",[t._v("它支持即时的实例化和延迟加载服务。")])]),t._v(" "),s("h3",{attrs:{id:"_2-8-spring-ioc-的实现机制。"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-8-spring-ioc-的实现机制。"}},[t._v("#")]),t._v(" 2.8. Spring IoC 的实现机制。")]),t._v(" "),s("p",[t._v("Spring 中的 IoC 的实现原理就是工厂模式加反射机制。")]),t._v(" "),s("p",[t._v("示例：")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interface")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Fruit")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n     "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("abstract")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("eat")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Apple")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("implements")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Fruit")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("eat")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Apple"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Orange")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("implements")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Fruit")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("eat")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Orange"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Factory")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Fruit")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getInstance")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ClassName")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Fruit")]),t._v(" f"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            f"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Fruit")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Class")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("forName")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ClassName")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("newInstance")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("catch")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Exception")]),t._v(" e"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            e"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("printStackTrace")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" f"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Client")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Fruit")]),t._v(" f"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Factory")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getInstance")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"io.github.dunwu.spring.Apple"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("f"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            f"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("eat")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h2",{attrs:{id:"_3-beans"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-beans"}},[t._v("#")]),t._v(" 3. Beans")]),t._v(" "),s("h3",{attrs:{id:"_3-1-什么是-spring-bean"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-什么是-spring-bean"}},[t._v("#")]),t._v(" 3.1. 什么是 spring bean？")]),t._v(" "),s("ul",[s("li",[t._v("它们是构成用户应用程序主干的对象。")]),t._v(" "),s("li",[t._v("Bean 由 Spring IoC 容器管理。")]),t._v(" "),s("li",[t._v("它们由 Spring IoC 容器实例化，配置，装配和管理。")]),t._v(" "),s("li",[t._v("Bean 是基于用户提供给容器的配置元数据创建。")])]),t._v(" "),s("h3",{attrs:{id:"_3-2-spring-提供了哪些配置方式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-spring-提供了哪些配置方式"}},[t._v("#")]),t._v(" 3.2. spring 提供了哪些配置方式？")]),t._v(" "),s("ul",[s("li",[t._v("基于 xml 配置")])]),t._v(" "),s("p",[t._v("bean 所需的依赖项和服务在 XML 格式的配置文件中指定。这些配置文件通常包含许多 bean 定义和特定于应用程序的配置选项。它们通常以 bean 标签开头。例如：")]),t._v(" "),s("div",{staticClass:"language-xml extra-class"},[s("pre",{pre:!0,attrs:{class:"language-xml"}},[s("code",[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("bean")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("id")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("studentbean"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("class")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("org.edureka.firstSpring.StudentBean"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("property")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("name")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("value")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("Edureka"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("property")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("bean")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])]),s("ul",[s("li",[t._v("基于注解配置")])]),t._v(" "),s("p",[t._v("您可以通过在相关的类，方法或字段声明上使用注解，将 bean 配置为组件类本身，而不是使用 XML 来描述 bean 装配。默认情况下，Spring 容器中未打开注解装配。因此，您需要在使用它之前在 Spring 配置文件中启用它。例如：")]),t._v(" "),s("div",{staticClass:"language-xml extra-class"},[s("pre",{pre:!0,attrs:{class:"language-xml"}},[s("code",[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("beans")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("context:")]),t._v("annotation-config")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("/>")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("\x3c!-- bean definitions go here --\x3e")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("beans")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])]),s("ul",[s("li",[t._v("基于 Java API 配置")])]),t._v(" "),s("p",[t._v("Spring 的 Java 配置是通过使用 @Bean 和 @Configuration 来实现。")]),t._v(" "),s("ol",[s("li",[t._v("@Bean 注解扮演与 "),s("code",[t._v("<bean />")]),t._v(" 元素相同的角色。")]),t._v(" "),s("li",[t._v("@Configuration 类允许通过简单地调用同一个类中的其他 @Bean 方法来定义 bean 间依赖关系。")])]),t._v(" "),s("p",[t._v("例如：")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Configuration")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("StudentConfig")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Bean")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("StudentBean")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("myStudent")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("StudentBean")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h3",{attrs:{id:"_3-3-spring-支持集中-bean-scope"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-spring-支持集中-bean-scope"}},[t._v("#")]),t._v(" 3.3. spring 支持集中 bean scope？")]),t._v(" "),s("p",[t._v("Spring bean 支持 5 种 scope：")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("Singleton")]),t._v(" - 每个 Spring IoC 容器仅有一个单实例。")]),t._v(" "),s("li",[s("strong",[t._v("Prototype")]),t._v(" - 每次请求都会产生一个新的实例。")]),t._v(" "),s("li",[s("strong",[t._v("Request")]),t._v(" - 每一次 HTTP 请求都会产生一个新的实例，并且该 bean 仅在当前 HTTP 请求内有效。")]),t._v(" "),s("li",[s("strong",[t._v("Session")]),t._v(" - 每一次 HTTP 请求都会产生一个新的 bean，同时该 bean 仅在当前 HTTP session 内有效。")]),t._v(" "),s("li",[s("strong",[t._v("Global-session")]),t._v(" - 类似于标准的 HTTP Session 作用域，不过它仅仅在基于 portlet 的 web 应用中才有意义。Portlet 规范定义了全局 Session 的概念，它被所有构成某个 portlet web 应用的各种不同的 portlet 所共享。在 global session 作用域中定义的 bean 被限定于全局 portlet Session 的生命周期范围内。如果你在 web 中使用 global session 作用域来标识 bean，那么 web 会自动当成 session 类型来使用。")])]),t._v(" "),s("p",[t._v("仅当用户使用支持 Web 的 ApplicationContext 时，最后三个才可用。")]),t._v(" "),s("h3",{attrs:{id:"_3-4-spring-bean-容器的生命周期是什么样的"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-4-spring-bean-容器的生命周期是什么样的"}},[t._v("#")]),t._v(" 3.4. spring bean 容器的生命周期是什么样的？")]),t._v(" "),s("p",[t._v("spring bean 容器的生命周期流程如下：")]),t._v(" "),s("ol",[s("li",[t._v("Spring 容器根据配置中的 bean 定义中实例化 bean。")]),t._v(" "),s("li",[t._v("Spring 使用依赖注入填充所有属性，如 bean 中所定义的配置。")]),t._v(" "),s("li",[t._v("如果 bean 实现 BeanNameAware 接口，则工厂通过传递 bean 的 ID 来调用 setBeanName()。")]),t._v(" "),s("li",[t._v("如果 bean 实现 BeanFactoryAware 接口，工厂通过传递自身的实例来调用 setBeanFactory()。")]),t._v(" "),s("li",[t._v("如果存在与 bean 关联的任何 BeanPostProcessors，则调用 preProcessBeforeInitialization() 方法。")]),t._v(" "),s("li",[t._v("如果为 bean 指定了 init 方法（"),s("code",[t._v("<bean>")]),t._v(" 的 init-method 属性），那么将调用它。")]),t._v(" "),s("li",[t._v("最后，如果存在与 bean 关联的任何 BeanPostProcessors，则将调用 postProcessAfterInitialization() 方法。")]),t._v(" "),s("li",[t._v("如果 bean 实现 DisposableBean 接口，当 spring 容器关闭时，会调用 destory()。")]),t._v(" "),s("li",[t._v("如果为 bean 指定了 destroy 方法（"),s("code",[t._v("<bean>")]),t._v(" 的 destroy-method 属性），那么将调用它。")])]),t._v(" "),s("p",[s("img",{attrs:{src:"https://raw.githubusercontent.com/dunwu/images/dev/cs/java/spring/core/spring-bean-life.png",alt:"img"}})]),t._v(" "),s("h3",{attrs:{id:"_3-5-什么是-spring-的内部-bean"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-5-什么是-spring-的内部-bean"}},[t._v("#")]),t._v(" 3.5. 什么是 spring 的内部 bean？")]),t._v(" "),s("p",[t._v("只有将 bean 用作另一个 bean 的属性时，才能将 bean 声明为内部 bean。为了定义 bean，Spring 的基于 XML 的配置元数据在 "),s("code",[t._v("<property>")]),t._v(" 或 "),s("code",[t._v("<constructor-arg>")]),t._v(" 中提供了 "),s("code",[t._v("<bean>")]),t._v(" 元素的使用。内部 bean 总是匿名的，它们总是作为原型。")]),t._v(" "),s("p",[t._v("例如，假设我们有一个 Student 类，其中引用了 Person 类。这里我们将只创建一个 Person 类实例并在 Student 中使用它。")]),t._v(" "),s("p",[t._v("Student.java")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Student")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),t._v(" person"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//Setters and Getters")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" address"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//Setters and Getters")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("bean.xml")]),t._v(" "),s("div",{staticClass:"language-xml extra-class"},[s("pre",{pre:!0,attrs:{class:"language-xml"}},[s("code",[t._v('<bean id=“StudentBean" class="com.edureka.Student">\n    '),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("property")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("name")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("person"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("\x3c!--This is inner bean --\x3e")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("bean")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("class")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("com.edureka.Person"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v('\n            <property name="name" value=“Scott">'),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("property")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v('\n            <property name="address" value=“Bangalore">'),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("property")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("bean")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("property")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("bean")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])]),s("h3",{attrs:{id:"_3-6-什么是-spring-装配"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-6-什么是-spring-装配"}},[t._v("#")]),t._v(" 3.6. 什么是 spring 装配")]),t._v(" "),s("p",[t._v("当 bean 在 Spring 容器中组合在一起时，它被称为装配或 bean 装配。 Spring 容器需要知道需要什么 bean 以及容器应该如何使用依赖注入来将 bean 绑定在一起，同时装配 bean。")]),t._v(" "),s("h3",{attrs:{id:"_3-7-自动装配有哪些方式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-7-自动装配有哪些方式"}},[t._v("#")]),t._v(" 3.7. 自动装配有哪些方式？")]),t._v(" "),s("p",[t._v("Spring 容器能够自动装配 bean。也就是说，可以通过检查 BeanFactory 的内容让 Spring 自动解析 bean 的协作者。")]),t._v(" "),s("p",[t._v("自动装配的不同模式：")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("no")]),t._v(" - 这是默认设置，表示没有自动装配。应使用显式 bean 引用进行装配。")]),t._v(" "),s("li",[s("strong",[t._v("byName")]),t._v(" - 它根据 bean 的名称注入对象依赖项。它匹配并装配其属性与 XML 文件中由相同名称定义的 bean。")]),t._v(" "),s("li",[s("strong",[t._v("byType")]),t._v(" - 它根据类型注入对象依赖项。如果属性的类型与 XML 文件中的一个 bean 名称匹配，则匹配并装配属性。")]),t._v(" "),s("li",[s("strong",[t._v("构造函数")]),t._v(" - 它通过调用类的构造函数来注入依赖项。它有大量的参数。")]),t._v(" "),s("li",[s("strong",[t._v("autodetect")]),t._v(" - 首先容器尝试通过构造函数使用 autowire 装配，如果不能，则尝试通过 byType 自动装配。")])]),t._v(" "),s("h3",{attrs:{id:"_3-8-自动装配有什么局限"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-8-自动装配有什么局限"}},[t._v("#")]),t._v(" 3.8. 自动装配有什么局限？")]),t._v(" "),s("ul",[s("li",[t._v("覆盖的可能性 - 您始终可以使用 "),s("code",[t._v("<constructor-arg>")]),t._v(" 和 "),s("code",[t._v("<property>")]),t._v(" 设置指定依赖项，这将覆盖自动装配。")]),t._v(" "),s("li",[t._v("基本元数据类型 - 简单属性（如原数据类型，字符串和类）无法自动装配。")]),t._v(" "),s("li",[t._v("令人困惑的性质 - 总是喜欢使用明确的装配，因为自动装配不太精确。")])]),t._v(" "),s("h2",{attrs:{id:"_4-注解"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-注解"}},[t._v("#")]),t._v(" 4. 注解")]),t._v(" "),s("h3",{attrs:{id:"_4-1-你用过哪些重要的-spring-注解"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-你用过哪些重要的-spring-注解"}},[t._v("#")]),t._v(" 4.1. 你用过哪些重要的 Spring 注解？")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("@Controller")]),t._v(" - 用于 Spring MVC 项目中的控制器类。")]),t._v(" "),s("li",[s("strong",[t._v("@Service")]),t._v(" - 用于服务类。")]),t._v(" "),s("li",[s("strong",[t._v("@RequestMapping")]),t._v(" - 用于在控制器处理程序方法中配置 URI 映射。")]),t._v(" "),s("li",[s("strong",[t._v("@ResponseBody")]),t._v(" - 用于发送 Object 作为响应，通常用于发送 XML 或 JSON 数据作为响应。")]),t._v(" "),s("li",[s("strong",[t._v("@PathVariable")]),t._v(" - 用于将动态值从 URI 映射到处理程序方法参数。")]),t._v(" "),s("li",[s("strong",[t._v("@Autowired")]),t._v(" - 用于在 spring bean 中自动装配依赖项。")]),t._v(" "),s("li",[s("strong",[t._v("@Qualifier")]),t._v(" - 使用 @Autowired 注解，以避免在存在多个 bean 类型实例时出现混淆。")]),t._v(" "),s("li",[s("strong",[t._v("@Scope")]),t._v(" - 用于配置 spring bean 的范围。")]),t._v(" "),s("li",[s("strong",[t._v("@Configuration")]),t._v("，"),s("strong",[t._v("@ComponentScan")]),t._v(" 和 "),s("strong",[t._v("@Bean")]),t._v(" - 用于基于 java 的配置。")]),t._v(" "),s("li",[s("strong",[t._v("@Aspect")]),t._v("，"),s("strong",[t._v("@Before")]),t._v("，"),s("strong",[t._v("@After")]),t._v("，"),s("strong",[t._v("@Around")]),t._v("，"),s("strong",[t._v("@Pointcut")]),t._v(" - 用于切面编程（AOP）。")])]),t._v(" "),s("h3",{attrs:{id:"_4-2-如何在-spring-中启动注解装配"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-如何在-spring-中启动注解装配"}},[t._v("#")]),t._v(" 4.2. 如何在 spring 中启动注解装配？")]),t._v(" "),s("p",[t._v("默认情况下，Spring 容器中未打开注解装配。因此，要使用基于注解装配，我们必须通过配置"),s("code",[t._v("<context：annotation-config />")]),t._v(" 元素在 Spring 配置文件中启用它。")]),t._v(" "),s("h3",{attrs:{id:"_4-3-component-controller-repository-service-有何区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-component-controller-repository-service-有何区别"}},[t._v("#")]),t._v(" 4.3. @Component, @Controller, @Repository, @Service 有何区别？")]),t._v(" "),s("ul",[s("li",[t._v("@Component：这将 java 类标记为 bean。它是任何 Spring 管理组件的通用构造型。spring 的组件扫描机制现在可以将其拾取并将其拉入应用程序环境中。")]),t._v(" "),s("li",[t._v("@Controller：这将一个类标记为 Spring Web MVC 控制器。标有它的 Bean 会自动导入到 IoC 容器中。")]),t._v(" "),s("li",[t._v("@Service：此注解是组件注解的特化。它不会对 @Component 注解提供任何其他行为。您可以在服务层类中使用 @Service 而不是 @Component，因为它以更好的方式指定了意图。")]),t._v(" "),s("li",[t._v("@Repository：这个注解是具有类似用途和功能的 @Component 注解的特化。它为 DAO 提供了额外的好处。它将 DAO 导入 IoC 容器，并使未经检查的异常有资格转换为 Spring DataAccessException。")])]),t._v(" "),s("h3",{attrs:{id:"_4-4-required-注解有什么用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-4-required-注解有什么用"}},[t._v("#")]),t._v(" 4.4. @Required 注解有什么用？")]),t._v(" "),s("p",[t._v("@Required 应用于 bean 属性 setter 方法。此注解仅指示必须在配置时使用 bean 定义中的显式属性值或使用自动装配填充受影响的 bean 属性。如果尚未填充受影响的 bean 属性，则容器将抛出 BeanInitializationException。")]),t._v(" "),s("p",[t._v("示例：")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Employee")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Required")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setName")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" string "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getName")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h3",{attrs:{id:"_4-5-autowired-注解有什么用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-5-autowired-注解有什么用"}},[t._v("#")]),t._v(" 4.5. @Autowired 注解有什么用？")]),t._v(" "),s("p",[t._v("@Autowired 可以更准确地控制应该在何处以及如何进行自动装配。此注解用于在 setter 方法，构造函数，具有任意名称或多个参数的属性或方法上自动装配 bean。默认情况下，它是类型驱动的注入。")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Employee")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Autowired")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setName")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" string "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getName")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h3",{attrs:{id:"_4-6-qualifier-注解有什么用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-6-qualifier-注解有什么用"}},[t._v("#")]),t._v(" 4.6. @Qualifier 注解有什么用？")]),t._v(" "),s("p",[t._v("当您创建多个相同类型的 bean 并希望仅使用属性装配其中一个 bean 时，您可以使用@Qualifier 注解和 @Autowired 通过指定应该装配哪个确切的 bean 来消除歧义。")]),t._v(" "),s("p",[t._v("例如，这里我们分别有两个类，Employee 和 EmpAccount。在 EmpAccount 中，使用@Qualifier 指定了必须装配 id 为 emp1 的 bean。")]),t._v(" "),s("p",[t._v("Employee.java")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Employee")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Autowired")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setName")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" string "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getName")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("EmpAccount.java")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("EmpAccount")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Employee")]),t._v(" emp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Autowired")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Qualifier")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("emp1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("showName")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("“"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Employee")]),t._v(" name "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" ”"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("emp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("getName"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h3",{attrs:{id:"_4-7-requestmapping-注解有什么用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-7-requestmapping-注解有什么用"}},[t._v("#")]),t._v(" 4.7. @RequestMapping 注解有什么用？")]),t._v(" "),s("p",[t._v("@RequestMapping 注解用于将特定 HTTP 请求方法映射到将处理相应请求的控制器中的特定类/方法。此注解可应用于两个级别：")]),t._v(" "),s("ul",[s("li",[t._v("类级别：映射请求的 URL")]),t._v(" "),s("li",[t._v("方法级别：映射 URL 以及 HTTP 请求方法")])]),t._v(" "),s("h2",{attrs:{id:"_5-数据访问"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-数据访问"}},[t._v("#")]),t._v(" 5. 数据访问")]),t._v(" "),s("h3",{attrs:{id:"_5-1-spring-dao-有什么用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-1-spring-dao-有什么用"}},[t._v("#")]),t._v(" 5.1. spring DAO 有什么用？")]),t._v(" "),s("p",[t._v("Spring DAO 使得 JDBC，Hibernate 或 JDO 这样的数据访问技术更容易以一种统一的方式工作。这使得用户容易在持久性技术之间切换。它还允许您在编写代码时，无需考虑捕获每种技术不同的异常。")]),t._v(" "),s("h3",{attrs:{id:"_5-2-列举-spring-dao-抛出的异常。"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-2-列举-spring-dao-抛出的异常。"}},[t._v("#")]),t._v(" 5.2. 列举 Spring DAO 抛出的异常。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://raw.githubusercontent.com/dunwu/images/dev/cs/java/spring/data-access/spring-data-access-exception.png",alt:"img"}})]),t._v(" "),s("h3",{attrs:{id:"_5-3-spring-jdbc-api-中存在哪些类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-3-spring-jdbc-api-中存在哪些类"}},[t._v("#")]),t._v(" 5.3. spring JDBC API 中存在哪些类？")]),t._v(" "),s("ul",[s("li",[t._v("JdbcTemplate")]),t._v(" "),s("li",[t._v("SimpleJdbcTemplate")]),t._v(" "),s("li",[t._v("NamedParameterJdbcTemplate")]),t._v(" "),s("li",[t._v("SimpleJdbcInsert")]),t._v(" "),s("li",[t._v("SimpleJdbcCall")])]),t._v(" "),s("h3",{attrs:{id:"_5-4-使用-spring-访问-hibernate-的方法有哪些"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-4-使用-spring-访问-hibernate-的方法有哪些"}},[t._v("#")]),t._v(" 5.4. 使用 Spring 访问 Hibernate 的方法有哪些？")]),t._v(" "),s("p",[t._v("我们可以通过两种方式使用 Spring 访问 Hibernate：")]),t._v(" "),s("ol",[s("li",[t._v("使用 Hibernate 模板和回调进行控制反转")]),t._v(" "),s("li",[t._v("扩展 HibernateDAOSupport 并应用 AOP 拦截器节点")])]),t._v(" "),s("h3",{attrs:{id:"_5-5-列举-spring-支持的事务管理类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-5-列举-spring-支持的事务管理类型"}},[t._v("#")]),t._v(" 5.5. 列举 spring 支持的事务管理类型")]),t._v(" "),s("p",[t._v("Spring 支持两种类型的事务管理：")]),t._v(" "),s("ol",[s("li",[t._v("程序化事务管理：在此过程中，在编程的帮助下管理事务。它为您提供极大的灵活性，但维护起来非常困难。")]),t._v(" "),s("li",[t._v("声明式事务管理：在此，事务管理与业务代码分离。仅使用注解或基于 XML 的配置来管理事务。")])]),t._v(" "),s("h3",{attrs:{id:"_5-6-spring-支持哪些-orm-框架"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-6-spring-支持哪些-orm-框架"}},[t._v("#")]),t._v(" 5.6. spring 支持哪些 ORM 框架")]),t._v(" "),s("ul",[s("li",[t._v("Hibernate")]),t._v(" "),s("li",[t._v("iBatis")]),t._v(" "),s("li",[t._v("JPA")]),t._v(" "),s("li",[t._v("JDO")]),t._v(" "),s("li",[t._v("OJB")])]),t._v(" "),s("h2",{attrs:{id:"_6-aop"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-aop"}},[t._v("#")]),t._v(" 6. AOP")]),t._v(" "),s("h3",{attrs:{id:"_6-1-什么是-aop"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-1-什么是-aop"}},[t._v("#")]),t._v(" 6.1. 什么是 AOP？")]),t._v(" "),s("p",[t._v("AOP(Aspect-Oriented Programming), 即 "),s("strong",[t._v("面向切面编程")]),t._v(", 它与 OOP( Object-Oriented Programming, 面向对象编程) 相辅相成, 提供了与 OOP 不同的抽象软件结构的视角.\n在 OOP 中, 我们以类(class)作为我们的基本单元, 而 AOP 中的基本单元是 "),s("strong",[t._v("Aspect(切面)")])]),t._v(" "),s("h3",{attrs:{id:"_6-2-aop-中的-aspect、advice、pointcut、jointpoint-和-advice-参数分别是什么"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-2-aop-中的-aspect、advice、pointcut、jointpoint-和-advice-参数分别是什么"}},[t._v("#")]),t._v(" 6.2. AOP 中的 Aspect、Advice、Pointcut、JointPoint 和 Advice 参数分别是什么？")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://raw.githubusercontent.com/dunwu/images/dev/cs/java/spring/core/spring-aop.png",alt:"img"}})]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("Aspect")]),t._v(" - Aspect 是一个实现交叉问题的类，例如事务管理。方面可以是配置的普通类，然后在 Spring Bean 配置文件中配置，或者我们可以使用 Spring AspectJ 支持使用 @Aspect 注解将类声明为 Aspect。")]),t._v(" "),s("li",[s("strong",[t._v("Advice")]),t._v(" - Advice 是针对特定 JoinPoint 采取的操作。在编程方面，它们是在应用程序中达到具有匹配切入点的特定 JoinPoint 时执行的方法。您可以将 Advice 视为 Spring 拦截器（Interceptor）或 Servlet 过滤器（filter）。")]),t._v(" "),s("li",[s("strong",[t._v("Advice Arguments")]),t._v(" - 我们可以在 advice 方法中传递参数。我们可以在切入点中使用 args() 表达式来应用于与参数模式匹配的任何方法。如果我们使用它，那么我们需要在确定参数类型的 advice 方法中使用相同的名称。")]),t._v(" "),s("li",[s("strong",[t._v("Pointcut")]),t._v(" - Pointcut 是与 JoinPoint 匹配的正则表达式，用于确定是否需要执行 Advice。 Pointcut 使用与 JoinPoint 匹配的不同类型的表达式。Spring 框架使用 AspectJ Pointcut 表达式语言来确定将应用通知方法的 JoinPoint。")]),t._v(" "),s("li",[s("strong",[t._v("JoinPoint")]),t._v(" - JoinPoint 是应用程序中的特定点，例如方法执行，异常处理，更改对象变量值等。在 Spring AOP 中，JoinPoint 始终是方法的执行器。")])]),t._v(" "),s("h3",{attrs:{id:"_6-3-什么是通知-advice"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-3-什么是通知-advice"}},[t._v("#")]),t._v(" 6.3. 什么是通知（Advice）？")]),t._v(" "),s("p",[t._v("特定 JoinPoint 处的 Aspect 所采取的动作称为 Advice。Spring AOP 使用一个 Advice 作为拦截器，在 JoinPoint “周围”维护一系列的拦截器。")]),t._v(" "),s("h3",{attrs:{id:"_6-4-有哪些类型的通知-advice"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-4-有哪些类型的通知-advice"}},[t._v("#")]),t._v(" 6.4. 有哪些类型的通知（Advice）？")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("Before")]),t._v(" - 这些类型的 Advice 在 joinpoint 方法之前执行，并使用 @Before 注解标记进行配置。")]),t._v(" "),s("li",[s("strong",[t._v("After Returning")]),t._v(" - 这些类型的 Advice 在连接点方法正常执行后执行，并使用@AfterReturning 注解标记进行配置。")]),t._v(" "),s("li",[s("strong",[t._v("After Throwing")]),t._v(" - 这些类型的 Advice 仅在 joinpoint 方法通过抛出异常退出并使用 @AfterThrowing 注解标记配置时执行。")]),t._v(" "),s("li",[s("strong",[t._v("After (finally)")]),t._v(" - 这些类型的 Advice 在连接点方法之后执行，无论方法退出是正常还是异常返回，并使用 @After 注解标记进行配置。")]),t._v(" "),s("li",[s("strong",[t._v("Around")]),t._v(" - 这些类型的 Advice 在连接点之前和之后执行，并使用 @Around 注解标记进行配置。")])]),t._v(" "),s("h3",{attrs:{id:"_6-5-指出在-spring-aop-中-concern-和-cross-cutting-concern-的不同之处。"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-5-指出在-spring-aop-中-concern-和-cross-cutting-concern-的不同之处。"}},[t._v("#")]),t._v(" 6.5. 指出在 spring aop 中 concern 和 cross-cutting concern 的不同之处。")]),t._v(" "),s("p",[t._v("concern 是我们想要在应用程序的特定模块中定义的行为。它可以定义为我们想要实现的功能。")]),t._v(" "),s("p",[t._v("cross-cutting concern 是一个适用于整个应用的行为，这会影响整个应用程序。例如，日志记录，安全性和数据传输是应用程序几乎每个模块都需要关注的问题，因此它们是跨领域的问题。")]),t._v(" "),s("h3",{attrs:{id:"_6-6-aop-有哪些实现方式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-6-aop-有哪些实现方式"}},[t._v("#")]),t._v(" 6.6. AOP 有哪些实现方式？")]),t._v(" "),s("p",[t._v("实现 AOP 的技术，主要分为两大类：")]),t._v(" "),s("ul",[s("li",[t._v("静态代理 - 指使用 AOP 框架提供的命令进行编译，从而在编译阶段就可生成 AOP 代理类，因此也称为编译时增强；\n"),s("ul",[s("li",[t._v("编译时编织（特殊编译器实现）")]),t._v(" "),s("li",[t._v("类加载时编织（特殊的类加载器实现）。")])])]),t._v(" "),s("li",[t._v("动态代理 - 在运行时在内存中“临时”生成 AOP 动态代理类，因此也被称为运行时增强。\n"),s("ul",[s("li",[t._v("JDK 动态代理")]),t._v(" "),s("li",[t._v("CGLIB")])])])]),t._v(" "),s("h3",{attrs:{id:"_6-7-spring-aop-and-aspectj-aop-有什么区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-7-spring-aop-and-aspectj-aop-有什么区别"}},[t._v("#")]),t._v(" 6.7. Spring AOP and AspectJ AOP 有什么区别？")]),t._v(" "),s("p",[t._v("Spring AOP 基于动态代理方式实现；AspectJ 基于静态代理方式实现。\nSpring AOP 仅支持方法级别的 PointCut；提供了完全的 AOP 支持，它还支持属性级别的 PointCut。")]),t._v(" "),s("h3",{attrs:{id:"_6-8-如何理解-spring-中的代理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-8-如何理解-spring-中的代理"}},[t._v("#")]),t._v(" 6.8. 如何理解 Spring 中的代理？")]),t._v(" "),s("p",[t._v("将 Advice 应用于目标对象后创建的对象称为代理。在客户端对象的情况下，目标对象和代理对象是相同的。")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("Advice + Target Object = Proxy\n")])])]),s("h3",{attrs:{id:"_6-9-什么是编织-weaving"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-9-什么是编织-weaving"}},[t._v("#")]),t._v(" 6.9. 什么是编织（Weaving）？")]),t._v(" "),s("p",[t._v("为了创建一个 advice 对象而链接一个 aspect 和其它应用类型或对象，称为编织（Weaving）。在 Spring AOP 中，编织在运行时执行。请参考下图：")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://upload-images.jianshu.io/upload_images/3101171-cfaa92f0e4115b4a.png",alt:"img"}})]),t._v(" "),s("h2",{attrs:{id:"_7-mvc"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_7-mvc"}},[t._v("#")]),t._v(" 7. MVC")]),t._v(" "),s("h3",{attrs:{id:"_7-1-spring-mvc-框架有什么用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_7-1-spring-mvc-框架有什么用"}},[t._v("#")]),t._v(" 7.1. Spring MVC 框架有什么用？")]),t._v(" "),s("p",[t._v("Spring Web MVC 框架提供 "),s("strong",[t._v("模型-视图-控制器")]),t._v(" 架构和随时可用的组件，用于开发灵活且松散耦合的 Web 应用程序。 MVC 模式有助于分离应用程序的不同方面，如输入逻辑，业务逻辑和 UI 逻辑，同时在所有这些元素之间提供松散耦合。")]),t._v(" "),s("h3",{attrs:{id:"_7-2-描述一下-dispatcherservlet-的工作流程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_7-2-描述一下-dispatcherservlet-的工作流程"}},[t._v("#")]),t._v(" 7.2. 描述一下 DispatcherServlet 的工作流程")]),t._v(" "),s("p",[t._v("DispatcherServlet 的工作流程可以用一幅图来说明：")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://raw.githubusercontent.com/dunwu/images/dev/cs/java/spring/web/spring-dispatcher-servlet.png",alt:"img"}})]),t._v(" "),s("ol",[s("li",[t._v("向服务器发送 HTTP 请求，请求被前端控制器 "),s("code",[t._v("DispatcherServlet")]),t._v(" 捕获。")]),t._v(" "),s("li",[s("code",[t._v("DispatcherServlet")]),t._v(" 根据 "),s("strong",[s("servlet-name",[t._v("-servlet.xml")])],1),t._v(" 中的配置对请求的 URL 进行解析，得到请求资源标识符（URI）。然后根据该 URI，调用 "),s("code",[t._v("HandlerMapping")]),t._v(" 获得该 Handler 配置的所有相关的对象（包括 Handler 对象以及 Handler 对象对应的拦截器），最后以"),s("code",[t._v("HandlerExecutionChain")]),t._v(" 对象的形式返回。")]),t._v(" "),s("li",[s("code",[t._v("DispatcherServlet")]),t._v(" 根据获得的"),s("code",[t._v("Handler")]),t._v("，选择一个合适的 "),s("code",[t._v("HandlerAdapter")]),t._v("。（附注：如果成功获得"),s("code",[t._v("HandlerAdapter")]),t._v("后，此时将开始执行拦截器的 preHandler(...)方法）。")]),t._v(" "),s("li",[t._v("提取"),s("code",[t._v("Request")]),t._v("中的模型数据，填充"),s("code",[t._v("Handler")]),t._v("入参，开始执行"),s("code",[t._v("Handler")]),t._v("（"),s("code",[t._v("Controller")]),t._v(")。 在填充"),s("code",[t._v("Handler")]),t._v("的入参过程中，根据你的配置，Spring 将帮你做一些额外的工作：\n"),s("ul",[s("li",[t._v("HttpMessageConveter： 将请求消息（如 Json、xml 等数据）转换成一个对象，将对象转换为指定的响应信息。")]),t._v(" "),s("li",[t._v("数据转换：对请求消息进行数据转换。如"),s("code",[t._v("String")]),t._v("转换成"),s("code",[t._v("Integer")]),t._v("、"),s("code",[t._v("Double")]),t._v("等。")]),t._v(" "),s("li",[t._v("数据根式化：对请求消息进行数据格式化。 如将字符串转换成格式化数字或格式化日期等。")]),t._v(" "),s("li",[t._v("数据验证： 验证数据的有效性（长度、格式等），验证结果存储到"),s("code",[t._v("BindingResult")]),t._v("或"),s("code",[t._v("Error")]),t._v("中。")])])]),t._v(" "),s("li",[t._v("Handler(Controller)执行完成后，向 "),s("code",[t._v("DispatcherServlet")]),t._v(" 返回一个 "),s("code",[t._v("ModelAndView")]),t._v(" 对象；")]),t._v(" "),s("li",[t._v("根据返回的"),s("code",[t._v("ModelAndView")]),t._v("，选择一个适合的 "),s("code",[t._v("ViewResolver")]),t._v("（必须是已经注册到 Spring 容器中的"),s("code",[t._v("ViewResolver")]),t._v(")返回给"),s("code",[t._v("DispatcherServlet")]),t._v("。")]),t._v(" "),s("li",[s("code",[t._v("ViewResolver")]),t._v(" 结合"),s("code",[t._v("Model")]),t._v("和"),s("code",[t._v("View")]),t._v("，来渲染视图。")]),t._v(" "),s("li",[t._v("视图负责将渲染结果返回给客户端。")])]),t._v(" "),s("h3",{attrs:{id:"_7-3-介绍一下-webapplicationcontext"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_7-3-介绍一下-webapplicationcontext"}},[t._v("#")]),t._v(" 7.3. 介绍一下 WebApplicationContext")]),t._v(" "),s("p",[t._v("WebApplicationContext 是 ApplicationContext 的扩展。它具有 Web 应用程序所需的一些额外功能。它与普通的 ApplicationContext 在解析主题和决定与哪个 servlet 关联的能力方面有所不同。")]),t._v(" "),s("p",[t._v("（完）")]),t._v(" "),s("hr"),t._v(" "),s("p",[t._v("👉 想学习更多 Spring 内容可以访问我的 Spring 教程："),s("strong",[s("a",{attrs:{href:"https://github.com/dunwu/spring-notes",target:"_blank",rel:"noopener noreferrer"}},[t._v("spring-notes"),s("OutboundLink")],1)])]),t._v(" "),s("h2",{attrs:{id:"_8-资料"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_8-资料"}},[t._v("#")]),t._v(" 8. 资料")]),t._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"https://www.edureka.co/blog/interview-questions/spring-interview-questions/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Top 50 Spring Interview Questions You Must Prepare In 2018"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"https://www.journaldev.com/2696/spring-interview-questions-and-answers",target:"_blank",rel:"noopener noreferrer"}},[t._v("Spring Interview Questions and Answers"),s("OutboundLink")],1)])])])}),[],!1,null,null,null);a.default=e.exports}}]);